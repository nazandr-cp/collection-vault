// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title IRewardsController Interface
 * @notice Defines the functions for managing user rewards, NFT bonus multipliers, and reward distribution.
 * @dev Updated to reflect signature-based balance updates (single and batch) and direct updates from an authorized updater.
 */
interface IRewardsController {
    /**
     * @notice Struct to hold NFT tracking data per user per collection.
     * @dev Renamed from UserNFTInfo to better reflect tracking potentially includes deposits.
     */
    struct UserCollectionTracking {
        uint256 lastUpdateBlock;
        uint256 lastNFTBalance;
        uint256 lastDepositBalance;
        uint256 lastUserRewardIndex;
    }

    /**
     * @notice Struct for a single balance update (NFT or deposit) within a batch.
     * @param user The address of the user to update
     * @param collection The collection this update applies to
     * @param blockNumber The block number of the update
     * @param nftDelta The NFT delta of the update, can be 0 if only deposit changes
     * @param depositDelta The deposit delta of the update, can be 0 if only NFT changes
     */
    struct UserBalanceUpdateData {
        address user;
        address collection;
        uint256 blockNumber;
        int256 nftDelta;
        int256 depositDelta;
    }

    /**
     * @notice Struct for a single user balance update (NFT or deposit)
     * @param collection The collection this simulated update applies to
     * @param blockNumber The block number of the update
     * @param nftDelta The NFT delta of the update, can be 0 if only deposit changes
     * @param depositDelta The deposit delta of the update, can be 0 if only NFT changes
     */
    struct BalanceUpdateData {
        address collection;
        uint256 blockNumber;
        int256 nftDelta;
        int256 depositDelta;
    }

    // --- Events ---
    event NFTCollectionAdded(address indexed collection, uint256 beta);
    event NFTCollectionRemoved(address indexed collection);
    event BetaUpdated(address indexed collection, uint256 oldBeta, uint256 newBeta);
    event RewardsClaimedForCollection(address indexed user, address indexed collection, uint256 amount);
    event RewardsClaimedForAll(address indexed user, uint256 totalAmount);
    event AuthorizedUpdaterChanged(address indexed oldUpdater, address indexed newUpdater);
    event NFTDataUpdaterAddressSet(address indexed updaterAddress);

    /**
     * @dev Emitted when a batch of balance updates (NFT or deposit) is processed successfully via signature.
     * @param numUpdates The number of updates processed in the batch.
     */
    event BalanceUpdatesProcessed(address indexed signer, uint256 nonce, uint256 numUpdates);

    /**
     * @dev Emitted when a batch of balance updates (NFT or deposit) is processed successfully via signature for a single user.
     * @param user The address of the user to process updates for.
     * @param nonce The nonce of the signer.
     * @param numUpdates The number of updates processed in the batch.
     */
    event UserBalanceUpdatesProcessed(address indexed user, uint256 nonce, uint256 numUpdates);

    // --- Balance Update Functions (Signature Based) ---

    /**
     * @notice Processes a batch of signed balance updates (NFT and/or deposit) for multiple users/collections.
     * @param updates An array of UserBalanceUpdateData structs.
     * @param signature An EIP-712 signature from the authorized updater covering the entire batch and the signer's nonce.
     * @dev The signature should be generated by the `authorizedUpdater` over the EIP-712 hash of the updates array and the nonce specific to the *signer* (authorizedUpdater).
     */
    function processBalanceUpdates(UserBalanceUpdateData[] calldata updates, bytes calldata signature) external;

    /**
     * @notice Processes a batch of signed balance updates (NFT and/or deposit) for a single user/collection.
     * @param user The address of the user to process updates for.
     * @param updates An array of BalanceUpdateData structs.
     * @param signature An EIP-712 signature from the authorized updater covering the entire batch and the signer's nonce.
     * @dev The signature should be generated by the `authorizedUpdater` over the EIP-712 hash of the updates array and the nonce specific to the *signer* (authorizedUpdater).
     */
    function processUserBalanceUpdates(address user, BalanceUpdateData[] calldata updates, bytes calldata signature)
        external;

    // --- Claiming Functions ---

    /**
     * @notice Claims the accrued rewards for the caller (msg.sender) and a single NFT collection.
     * @param nftCollection The address of the NFT collection to claim rewards for.
     */
    function claimRewardsForCollection(address nftCollection) external;

    /**
     * @notice Claims the accrued rewards for the caller (msg.sender) across all their tracked NFT collections.
     */
    function claimRewardsForAll() external;

    // --- View Functions ---

    /**
     * @notice Preview total pending rewards for a user across multiple specified collections, optionally simulating future updates.
     * @dev Functionally identical to getPendingRewards.
     * @param user The user address.
     * @param nftCollections An array of collection addresses to calculate rewards for.
     * @param simulatedUpdates An array of future updates, MUST be pre-sorted by blockNumber. Each update must specify its collection.
     * @return pendingReward The total reward claimable across the specified collections (including simulated updates).
     */
    function previewRewards(
        address user,
        address[] calldata nftCollections,
        BalanceUpdateData[] calldata simulatedUpdates
    ) external view returns (uint256 pendingReward);

    /**
     * @notice Retrieves the stored NFT tracking information for a user across multiple specified collections.
     * @param user The user address.
     * @param nftCollections An array of collection addresses to retrieve info for.
     * @return An array of UserNFTInfo structs containing last update block, last balance, and last index for each requested collection. The order corresponds to the input `nftCollections` array.
     */
    function getUserCollectionTracking(address user, address[] calldata nftCollections)
        external
        view
        returns (UserCollectionTracking[] memory);

    /**
     * @notice Retrieves the list of all currently whitelisted NFT collections.
     * @return An array of NFT collection addresses.
     */
    function getWhitelistedCollections() external view returns (address[] memory);

    /**
     * @notice Retrieves the beta coefficient for a specific collection.
     * @param nftCollection The collection address.
     * @return The beta value for the collection.
     */
    function getCollectionBeta(address nftCollection) external view returns (uint256);

    /**
     * @notice Retrieves the list of collections a user is actively being tracked for rewards.
     * @param user The user address.
     * @return An array of NFT collection addresses the user is tracked for.
     */
    function getUserNFTCollections(address user) external view returns (address[] memory);

    // --- Admin Functions --- //

    /**
     * @notice Adds a new NFT collection to the whitelist and sets its beta coefficient.
     * @dev Should enforce authorization (e.g., onlyOwner).
     * @param collection The address of the NFT collection.
     * @param beta The reward coefficient for this collection.
     */
    function addNFTCollection(address collection, uint256 beta) external;

    /**
     * @notice Removes an NFT collection from the whitelist.
     * @dev Should enforce authorization (e.g., onlyOwner).
     * @param collection The address of the NFT collection.
     */
    function removeNFTCollection(address collection) external;

    /**
     * @notice Updates the beta coefficient for an existing whitelisted NFT collection.
     * @dev Should enforce authorization (e.g., onlyOwner).
     * @param collection The address of the NFT collection.
     * @param newBeta The new reward coefficient.
     */
    function updateBeta(address collection, uint256 newBeta) external;

    /**
     * @notice Sets the address of the authorized updater allowed to submit signed balance updates.
     * @dev Should enforce authorization (e.g., onlyOwner). Replaces previous NFTDataUpdater concept.
     * @param _newUpdater The address of the new authorized updater.
     */
    function setAuthorizedUpdater(address _newUpdater) external;
}
