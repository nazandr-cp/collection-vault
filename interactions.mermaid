sequenceDiagram
    actor User
    participant V as ERC4626Vault
    participant LM as LendingManager
    participant C as Compound_cToken
    participant RC as RewardsController
    participant AU as AuthorizedUpdater

    %% Deposit Flow
    User->>+V: deposit(assets, receiver) / mint(shares, receiver)
    V->>V: _hookDeposit(assets, shares)
    V->>+LM: asset.safeTransfer(LM_address, assets)
    Note over V,LM: Vault transfers assets to LM
    LM->>+C: asset.approve(cToken_address, max) # Setup
    LM->>+C: cToken.mint(amount)
    C-->>-LM: 0 (Success) / Error Code
    LM-->>-V: (Implicit Success/Revert)
    V-->>-User: shares / assets

    %% Withdraw Flow
    User->>+V: withdraw(assets, receiver, owner) / redeem(shares, receiver, owner)
    V->>V: _hookWithdraw(assetsToWithdraw, shares)
    alt Vault balance < assetsToWithdraw
        V->>+LM: totalAssets()
        LM-->>-V: lmTotalAssets
        Note over V,LM: Check if LM has enough
        V->>+LM: withdrawFromLendingProtocol(neededFromLM)
        LM->>+C: cToken.redeemUnderlying(neededFromLM)
        C-->>-LM: 0 (Success) / Error Code
        LM->>+V: asset.safeTransfer(Vault_address, neededFromLM)
        V-->>-LM: (Implicit Success/Revert)
        LM-->>-V: true (Success) / Revert
    end
    V->>User: asset.safeTransfer(receiver, assetsToWithdraw)
    V-->>-User: shares / assets

    %% Reward Calculation & Update
    AU->>+RC: processBalanceUpdates(updates, signature) / processUserBalanceUpdates(...)
    Note over AU,RC: Signed NFT/Deposit Deltas
    RC->>RC: Verify Signature & Nonce
    RC->>RC: _processSingleUpdate(user, collection, block, nftDelta, depositDelta)
    RC->>RC: _updateGlobalRewardIndexTo(updateBlock)
    RC->>+LM: getBaseRewardPerBlock()
    LM-->>-RC: rewardPerBlock
    RC->>+LM: totalAssets()
    LM-->>-RC: lmTotalAssets
    RC->>RC: Update globalRewardIndex & userRewardState
    RC-->>-AU: (Implicit Success/Revert)

    %% Reward Claim Flow
    User->>+RC: claimRewardsForCollection(collection) / claimRewardsForAll()
    RC->>RC: _updateGlobalRewardIndex()
    RC->>RC: _getPendingRewardsSingleCollection(...)
    RC->>+LM: transferYield(totalReward, RC_address)
    LM->>+RC: asset.safeTransfer(RC_address, totalReward) # Assuming yield held directly (NEEDS FIX)
    Note over LM,RC: LM transfers yield to RC
    LM-->>-RC: true (Success) / Revert
    RC->>User: rewardToken.safeTransfer(user, totalReward)
    RC->>RC: Update userRewardState (reset accrued, update index/block)
    RC-->>-User: (Emit Events)